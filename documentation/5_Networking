Lecture: Create a Docker Bridge Network for a Developer to Use for Their Containers
-----------------------------------------------------------------------------------
 	-- docker containers have to be resided on network to able to communicate to the host and system
	-- docker by default installs a bridge network with bride driver.
	-- docker network ls # will provide all the networks available and typical network interfaces on docker host with swarm manager is below
		NETWORK ID          NAME                    DRIVER              SCOPE
		2a2a716a5cde        bridge                  bridge              local
		b7d38e08af0c        docker_gwbridge         bridge              local
		08872031334c        host                    host                local
		y9w89q8lp40f        ingress                 overlay             swarm
	-- docker network inspect <Network Name> # Provide the details of network like subnet, options available and so..
        -- docker network inspect bridge
            [
                {
                    "Name": "bridge",
                    "Id": "2a2a716a5cdefd64b49f2d5b85dfe2744c868ef469edd914651ba69e844fe6b7",
                    "Created": "2018-01-31T22:08:07.969964386-08:00",
                    "Scope": "local",
                    "Driver": "bridge",
                    "EnableIPv6": false,
                    "IPAM": {
                        "Driver": "default",
                        "Options": null,
                        "Config": [
                            {
                                "Subnet": "172.17.0.0/16",
                                "Gateway": "172.17.0.1"
                            }
                        ]
                    },
                    "Internal": false,
                    "Attachable": false,
                    "Ingress": false,
                    "ConfigFrom": {
                        "Network": ""
                    },
                    "ConfigOnly": false,
                    "Containers": {},
                    "Options": {
                        "com.docker.network.bridge.default_bridge": "true",
                        "com.docker.network.bridge.enable_icc": "true",
                        "com.docker.network.bridge.enable_ip_masquerade": "true",
                        "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
                        "com.docker.network.bridge.name": "docker0",
                        "com.docker.network.driver.mtu": "1500"
                    },
                    "Labels": {}
                }
            ]
	-- Lets start a container with httpd on the default network
		-- docker run -d --name "testweb1" -p 8081:80 httpd # on default network with 8081 local port
		-- docker inspect --format="{{.NetworkSettings.Networks.bridge.IPAddress}}" testweb1 # verify the IP Address
	-- Lets create an new user network
		-- docker network create --dricer=bridge --subnet=192.168.1.0/24 --opt "com.docker.network.driver.mtu"="1501" develop01 # command to create a network
	-- Verify if the network is available through docker nework ls and docker network inspect develop01
	-- Now we can connect the existing and running container to different network user docker network connect command. However, you can only connect an running container to user created network but not the default/system created one
	-- Below command will connect the same container to different network
		-- docker network connect --ip=192.168.1.10 develop01 testweb1 
	-- Now the container is available on both the Existing  default network and as well as new network. Run the inpect command to verify container IP Address
		-- docker inspect --format="{{.NetworkSettings.Networks.bridge.IPAddress}}" testweb1
			curl http://192.168.1.10 # new user defined network
		-- docker inspect --format="{{.NetworkSettings.Networks.develop01.IPAddress}}" testweb1
			curl http://172.17.0.2 # default network
	-- Now you can disconnect one container from existing network using docker network disconnect <network_name> <container_name/ID>
		-- docker network disconnect bridge testweb1
		-- -- docker inspect --format="{{.NetworkSettings.Networks.bridge.IPAddress}}" testweb1 # this will return null


Lecture: Configure Docker for External DNS
------------------------------------------
-- By default, the dns for containers use local host dns configuration available on /etc/resolv.conf
	  -- docker run -d --name "testweb" httpd 
	  -- docker exec -it httpd /bin/bash && cat /etc/resolv.conf 	
-- However, if you want to change it for a container you can pass --dns switch and change for a container
	  -- docker run -d --name "testweb" --dns=8.8.8.8 --dns=8.8.4.4 httpd
-- But if you need to change for any container that gets created, you need to add dns entry into /etc/docker/daemon.json
	  -- In /etc/docker/daemon.json 
		{
			"dns" : ["8.8.8.8",8.8.4.4"]
		}
	  -- restart docker (systemctl restart docker)
	  -- docker run -d --name "testweb" httpd
	  -- docker exec -it httpd /bin/bash && cat /etc/resolv.conf

Publish a Port So That an Application Is Accessible Externally and Identify the Port and IP It Is On
----------------------------------------------------------------------------------------------------
	
	 -- docker run -d --name "testweb" -P httpd
		-P : Inspect the image doc and find the port and map a random localhost to actual container port
	 -- docker run -d --name "testweb" -p 80:80 httpd or docker run -d --name "testweb" -publish 80:80 httpd 
		-p : Defined local host to known container port	

Lecture: Deploy a Service on a Docker Overlay Network
-----------------------------------------------------
-- Learn how subnet works ?
	-- docker network ls # existing networks
	-- ingress can exist only once per network
	-- Lets create a docker network with overlay
		-- docker network create --driver=overlay --subnet=192.168.1.0/24 overlay0
	-- docker network inspect overlay0 
		-- overlay0 is only available in manager but not on other managers or workers.
		-- to build out the same network on other nodes to we need start the service with same network in the cluster and replicas
	-- docker service create --name testweb3 -p 80:80 --network=overlay0 --replicas 3 httpd
	-- once the service is started the overlay0 is available on the all worker nodes as well
	-- however, using the overlay0 network IP, you will not able to access service dirctly from the worker node
	-- for example, if you trying to access the service through curl or browser or elink from the swarm manager, where actually you created the network, you will able to access it. But that not the same case with worker node. You will not be able to access thesame from worker node
	-- what overlay network can do in a cluster is that it enable the intercommunication within the container. I.e. It enable network response between the containers

Lecture: Describe the Built In Network Drivers and Use Cases for Each and Detail the Difference Between Host and Ingress Network Port Publishing Mode
-----------------------------------------------------------------------------------------------------------------------------------------------------

	-- Docker Network Drivers
		- Bridge
		- None
		- Host
		- Overlay
		- Ingress
		- Docker Gateway Bridge
	-- Host and Ingress are required for Certification

	Bridge:
	======
		- Simple and Default on Standalone docker hosts
		- Private network internal to host system and container deployed on this network can communicate:	
		- External access is granted by port exposure of container service or use static route on the host.
	None:
	====
		- Used when container needs no network acccess and can be accessed only on the host
		- Not commonly used
	Host:
	====
		- Host-only networking
		- accessable via underlying hosts
		- access to services can only be provided by exposing container ports on the host system 
		
	Overlay:
	=====
		- Allow communication between all docker daemon on the swarm cluster
		- swarm scope driver and extends to all daemons in swarm cluster
		- Assign a service to overlay network, and when the service starts the same is extended to other worker nodes
		-default mode of swarm communication
	Ingress:
	=======
		- Special overlay network that load balances network traffic among a given service working nodes
		- Maintains a list of all IP address from nodes that participate in that service and when a request comes in, routes to one of them for the indicates services
		- Provides the 'routing mesh' that allows services to be exposed to the external network without having a repica running on every node in swarm
		- Basically, even if service is running with one replica on any nodes in swarm cluster , and if you try to access the service from any node, 'routing mesh' has the ability to route the traffic to and provide the response.

	Docker Gateway Bridge:
	=====================
		- Special bridge network that allows overlay networks access to an individual docker daemon's physical network
		- Every container run within a service is connected to the local docker daemon's hostnetwork
		- Automatically create when a sarm is initializd or joined
	
	
 Port Publishing Mode
	Host:
	====

		port for container are only available on the underlying host system and NOT available for services outside of the host where the instances exists
		Used in single host environments or in environmens where you need complete control over routing
		You are responsible for knowing where all instances are at all times, controlled with 'mode=host' in deployment
	Ingress:
	=========
		Since it is responsible for "routing mesh", it makes all published ports available on all hosts participating in the clusrer so that the service is accessable from every node 

Lecture: Troubleshoot Container and Engine Logs to Understand Connectivity Issues Between Containers
----------------------------------------------------------------------------------------------------
	- System Level
	- Service Level
	- Container Level

	system Level:
	============
		- docker daemon logs are available in /var/log/messages. but in ubuntu they are present in /var/log/daemon
		-  grep [dD]docker /var/log/messages
			- verify Node join events
			- connectivity issues
			-
	Container Level:
	===============
		- docker container logs <container_id>

	Service Level:
	=============
		service logs would be important, because the service has multiple replicas across different nodes in the swarm cluster
		- docker service logs <service_name> # gives aggregate logs of all the nodes partiparting and service is running
		- if there are no logs any of the container, then we can log on to individual node and get container logs using docker container logs <container_Id> to find the root cause

Lecture: Understanding the Container Network Model
--------------------------------------------------
	- Implementation that formalizes how networking for containers is provided while allowing abstractions that are used to support multiple network drivers
	- it is built on three main components
Components:
	- Sandbox :
		Encompasses the network stack configuration, including management of interfaces, routing and DNS of 1 to N endpoints on 1 to N networks

	- Endpoint
		interfcces, switches, port etc

	- Network :
		a collection of endpoints such as bridges,routers etc

	-- Object inside the network model include
		- Network Controller
		- Driver
		- Network
		- Enpoint
		- Sandbox
	Each of those having options and label and interacting with each other as specified
i	-- Dokcer Networking and IPAM(Internet Protocal Address Management)
		Managing address across multiple hosts on seperate physcal networks while providing routing to underlying swarm networks externally is the "IPAM Problem"

Lecture: Understand and Describe the Traffic Types that Flow Between the Docker Engine, Registry and UCP Components
-------------------------------------------------------------------------------------------------------------------
	Communication Traffic between Docker Engine, UCP and DTR in a swarm env
	Manager:
		UCP manager
		UCP agent
		Docker EE
	Worker:
		UCP Worker
		UCP agent
		Docker EE
	Worker:
		DTR Services
		UCP Worker
		UCP Agent
		Docker EE
	Hierarchy if UCP and DTR

		- Cloud Servers | Physical Servers | VMs
		-- Docker EE
		--- UCP
		---- DTR | Services
	
	



	
	





































