Installation and Configuration - 15%

  Complete Docker Installation on Multiple Platforms (CentOS/Red Hat)
  -------------------------------------------------------------------
	- yum install -y yum-utils device-mapper-persistent-data lvm2
	- yum config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
	- yum update
	-  yum install -y docker-ce
 	- systemctl enable docker && systemctl start docker && systemctl status docker
cd /var/run/
   	- ls -l docker.sock
   	- useradd user1
	- usermod -aG docker user1 

  Complete Docker Installation on Multiple Platforms (Debian/Ubuntu)
  ------------------------------------------------------------------	
	- apt-get install apt-transport-https ca-certificates curl software-properties-common
	- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	- sudo apt-get repository "deb [arch-amd64] https://downlaod.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	- apt-get update
	- apt-get install docker-ce
	- systemctl status docker
	- usermod -aG docker user1
	- /var/run/docker.sock 

  Selecting a Storage Driver
  --------------------------
	- Docker supports several different storage drivers, using a pluggable architecture. The storage driver controls how images and containers are stored and managed on your Docker host.
	- try to use the storage driver with the best overall performance and stability in the most usual scenarios.
		- overlay2 is preferred, followed by overlay. Neither of these requires extra configuration. overlay2 is the default choice for Docker CE.
		- devicemapper is next, but requires direct-lvm for production environments, because loopback-lvm, while zero-configuration, has very poor performance
	- devicemapper is officially supported on centos/fedora
	Linux distribution	Recommended storage drivers
	Docker CE on Ubuntu	aufs, devicemapper, overlay2 (Ubuntu 14.04.4 or later, 16.04 or later), overlay, zfs, vfs
	Docker CE on Debian	aufs, devicemapper, overlay2 (Debian Stretch), overlay, vfs
	Docker CE on CentOS	devicemapper, vfs
	Docker CE on Fedora	devicemapper, overlay2 (Fedora 26 or later, experimental), overlay (experimental), vf	

	- If you need to change the storage driver, then you can create daemon.json under /etc/docker and add the storage driver
	- The default storage driver that comes along with docker-ce installation is overlay
	- By the adding below json object into daemon.json and restarting the docker service will change the storage driver
	- JSON object 
		cat /etc/docker/daemon.json
			{
				"storage-driver" : "devicemapper"
			}	
	- restart docker service
		systemctl restart docker.service
	- check the storage driver
		[root@localhost documentation]# docker info | grep Storage
		WARNING: devicemapper: usage of loopback devices is strongly discouraged for production use.
		         Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.
		Storage Driver: devicemapper
	- devicemapper is offically supported,recommended storage driver
	- If you are ever changing the storage driver, it is best recommeneded to take the backup/export of the existing images and import after changing the storage drivers
	- Once you change the storage driver to devicemapper, you will notice devicemapper directory under /var/lib/docker/.
	- Any images downloaded will also increase size of this devicemapper

   Configuring Logging Drivers (Syslog, JSON-File, etc.)
   -----------------------------------------------------
	- configuring the logging drivers as similar to as storage drivers
	- Docker includes multiple logging mechanisms to help you get information from running containers and services. These mechanisms are called logging drivers.	

  Setting Up Swarm
  -----------------
	- Setting up docker swarm mode cluster.
	- (manager)
	- docker swarm is going to contain one or more nodes or one or more managers
	- nodes does the work and managers manage the workload 
	- Setup manager to deploy containers and services
		- docker swarn init --advertise-addr <SERVER_IP>
	  	
		- docker swarm join --token SWMTKN-1-<TOKEN> <SERVER_IP>:<PORT> # Note this token for adding nodes to the manager
		- docker swarm join-token worker # you can use this command on the manager to generate docker join-token used for adding the nodes
	- If you need to add another node as a additional manager , you will need to generate manager token
		- docker swarm join-token manager

	
