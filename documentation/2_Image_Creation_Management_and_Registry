Pull an Image from a Registry (Using Docker Pull and Docker Images
------------------------------------------------------------------
	
		docker pull hello-world
		docker pull -a hello-world # all tagged images
		docker images
		docker pull --disable-content-trust hello-world # pull only from trusted content 
		docker run hello-world
		docker images --all # all images
		docker images --digests # return all digest for the images
		docker pull centos:6
		docker images --filter "before=centos:6"
		docker images --no-trunc # display full IDs
		docker images -q # only 7 digit IDs
Searching an Image Repository
----------------------------
		docker search <name> # download the images that have more than 50 stars is offical
		docker search --filter start=50 httpd -filter is-offical apache
		docker search --limit 50 apache
------------
Tag an Image
-------------

		docker tag centos:6 mycentos:1 # creates new tag for exiting images
		docker images
		docker rmi centos:6 # will only remove the tag
		docker rmi mycentos:1 # will remove the complete image
		docker pull centos:6 # pull it agin
		docker tag centos:6 myrepo/mycentos:v1 # tag with reponame in it

----------------------------------------------------------------
Use CLI Commands to Manage Images (List, Delete, Prune, RMI, etc)
-----------------------------------------------------------------
  		docker image history myrepo/mycentos:v1
		docker image save myrepo/mycentos:v1 -o mycustome.tar # backup an email
		docker rmi myrepo/mycentos:v1 # remove the image
		docker import mycustome.tar localimport:centos # importing an backup images
		docker load --input mycustome.tar # restore an backed up image
		docker image ls # list images
		docker image prune # will delete dangling images. That means, it deletes the images that are netither associated to container nor complete image
		docker image prune -a	# Will delete all the images that are not associated with atleast one container

Inspect Images and Report Specific Attributes Using Filter and Format
-----------------------------------------------------------------
		docker image inspect <image>:<tag> # will provide the information on image in a json format
		docker image inspect centos:6 --format '{{.ContainerConfig.Hostname}}' # This command will get the value of Hostname
		
		docker image inspect centos:6 --format '{{.ContainerConfig}}' # gives the values for the given key
		docker image inspect centos:6 --format '{{json .ContainerConfig}}' # provides key and value in json format
  		docker image inspect centos:6 --format '{{.RepoTags}}' # List the repo tag in the image inspect json

Container Basics - Running, Attaching to, and Executing Commands in Containers
------------------------------------------------------------------------------
	 docker run centos:6 # run the container with centos:6 images. 
	 docker ps -a # check the containers that are started and stopped
	 docker run -it centos:6 # start the container attach it interactively to the terminal
	 docker run -it --name testcontainer centos:6 /bin/bash # Provide name to container
	 docker rm `docker ps -a -q` # delete all the stopped containers
	 docker run -it --rm --name testcontainer centos:6 /bin/bash # --rm will delete the stopped image after container is stopped
	 docker run -it --rm --env MYVAR=whatever --name testcontainer centos:6 /bin/bash # passing environment variable on command line
	 docker run -it --rm --env MYVAR=whatever --env MYVAR2=somthing --name testcontainer centos:6 /bin/bash # passing multiple pasramaters
	 docker run -d --rm --name testcontainer centos:6 /bin/bash # run the contauner in detached mode. but it starts and exit as we have mentioned /bin/bash as entry point
	 docker run -d --name testcontainer centos:6 # This will start the contiainer in deatched mode and use the entry defined for the image 
	 docker attach <container_name or _id> # if you attache and exit the container, the container will be stopped
	 docker exec -it <container_name or _id> /bin/bash # use exec to login and ensure the container exit wil not stop the container

Container Basics - Running, Attaching to, and Executing Commands in Containers
------------------------------------------------------------------------------
  	vim Dockerfile # Create Dockerfile for building the docker images
	
	Below is an exmaple
	-----------------------------------------------
		# This is small test docker file
		FROM centos:6
		LABEL maintainer="sam943"

		RUN yum update -y	
	----------------------------------------------
	docker build -t  custom_image:v1 . #build docker images from the directory where Dockefile exists 
	vim Dockerfile # update the docker file and rebuild
	docker build -t  custom_image:v1 . # at the point it will rebuild the images with multiple layers
	cp Dockerfile Dockerfile2 
	vim Dockerfile2
	docker build -t new_ubuntu:v2 -f Dockerfile2 . # running docker with different file name other Dockerfile
	docker build - < Dockerfile # sample as above
	docker build -t https://github_url # can also execute the docker that is on github or another scm tool
	docker build --pull --no-cache --squash -t optimized:v1 . # --no-cache will not maintain and --squase will merge all the layers of images and intermediates images into a single images
	docker build --pull --no-cache -t optimized:v1 . # builing the image with any cache

Dockerfile Options, Structure, and Efficiencies (Part I)
---------------------------------------------------------
-- Dockerfile Options and Structures avaialable
	FROM # Is will be first structure of the docker file that will be started with and this indicated from where the docker base image is build upon
	ARGS  # This is the only structure that can exceed before FROM structure and is used for passing as argunments
	RUN # Command defined in RUN Structure are used to prepare the image
	CMD # Command defined under CMD structure are used at the start of container instatiation and can overwritter when staring container instatition
	ENTRYPOINT # Command defined under ENTRYPOINT are used at the start of the container and can't be changed during the container startup
	LABEL # is metadeta for the container ; example LABEL maintainer=<someone>@<somedomain>
	MAINTAINER # Deprecated in recent release. However, the same can defined under LABEL
	EXPOSE # ports defined can be exposed in the image metadata

-- Below is an example of Dockerfile for starting 
	FROM centos:6
	LABEL maintainer=sam
	
	RUN yum update -y
	RUN yum install httpd net-tools -y 
	RUN rm -rf /run/http/* /tmp/httpd*
        
	ENV ENVIRONMENT=PROD
	EXPOSE 80
	ENTRYPOINT apachectl "-DFOREGROUD" 

-- Each structure mentioned above when defined in Dockerfile will be layer in the image and while it tries to build the images. The above build file has 8 structure defined
-- So to optimize layers while building the image we can group same the structure if neccessary as below. The below build file optimize the layers from 8 to 6
        FROM centos:6
        LABEL maintainer=sam

        RUN yum update -y \
	    yum install httpd net-tools -y \
            rm -rf /run/http/* /tmp/httpd*

        ENV ENVIRONMENT=PROD
        EXPOSE 80
        ENTRYPOINT apachectl "-DFOREGROUD"

-- Lets add few more layers
	ARGS TAGVERSION=6 # defining a variable 
        FROM centos:${TAGVERSION}
        LABEL maintainer=sam
	COPY index.html /var/www/html

        RUN yum update -y \
            yum install httpd net-tools -y \
            rm -rf /run/http/* /tmp/httpd*

        ENV ENVIRONMENT=PROD
	VOLUME /mymountpoint # Creating mountpoints
        EXPOSE 80
        ENTRYPOINT apachectl "-DFOREGROUD"
-- ARGS can used as variable through dockerfile when defined file paths and other complex paths
-- docker ps --no-trunc # will sho the full command executed for that container
-- ADD and COPY does that same operation of copying of files from source to destination. However, ADD also copy from URL to desc, but COPY is only work with file on local filesystem
-- SHELL structure can be used to change the login shell at ENTRYPOINT
-- WORKDIR is used for changing the working directory from where the container is running

Describe and Display How Image Layers Work
------------------------------------------
	-- Images layers are command executed for each structure defined on the build file
	-- If you run docker images history <image>:<version>, you would notice that each structure is seperately executed on different file system
	-- docker used union file system and groups all the command executed at different layer on different filesystem into a single image filesystem	
	-- you will also notice that actual size of the images is union of each layer size. below is an example
		docker images myweb_optimzed:v2

		REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
		myweb_optimzed      v2                  5a6b5d8c908a        31 minutes ago      320MB

		docker image history myweb_optimzed:v2
		
		IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
		5a6b5d8c908a        31 minutes ago      /bin/sh -c #(nop)  ENTRYPOINT ["/bin/sh" "-c…   0B
		31c50119e21a        31 minutes ago      /bin/sh -c #(nop)  EXPOSE 80                    0B
		eded1642b33d        31 minutes ago      /bin/sh -c #(nop)  ENV ENVIRONMENT=PROD         0B
		4b18c502e052        31 minutes ago      /bin/sh -c yum update -y &&     yum install …   126MB
		c4ad1483546f        38 minutes ago      /bin/sh -c #(nop)  LABEL maintainer=sam         0B
		609c1f9b5406        2 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B
		<missing>           2 weeks ago         /bin/sh -c #(nop)  LABEL name=CentOS Base Im…   0B
		<missing>           2 weeks ago         /bin/sh -c #(nop) ADD file:a492298cd1f5ef632…   195MB	

Modify an Image to a Single Layer
---------------------------------
	-- There is no direct command to merge all the layers into a single layer provided by docker. But there is open-source project to squase the layers into single layer
	-- As far is docker is concerned we can export the image and re-import it to save somediskspace
	Example :
		docker export myweb_optimzed:v2 > myweb_optimzed_v2.tar
		docker import myweb_optimzed:v3 myweb_optimzed_v2.tar
	Now AFTER the import there is only layer that is import layer and the size is compressed to save disk space

	
	
 




















































