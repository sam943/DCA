Lecture: State the Difference Between Running a Container and Running a Service
------------------------------------------------------------------------------

	- Container is a specific and limited abstraction layer of application and OS
	- Service is a solution to manage the container deployed in highly available, easily scalable cluster implementation
	- difference,pro and cons of services over containers

Demonstrate Steps to Lock (and Unlock) a Cluster
-------------------------------------------------
- Locking and unlocking of swarm cluster required to have an extra security on the system
- Once the cluster is locked, and docker service is restarted, you will not be able to start perform an swarm operations
- Docker service will be started, but the not swarm service.
	docker swarm init --autolock # Lock the cluster during the swarm initiation
	docker swarm update --autolock=true # for existng cluster
	-- note the above output to file or password manager
	-- restart the docker service
	docker nodes ls will not list anything as it is locked
	docker node unlock # Use this unlock the swarm
	docker swarm unlock-key  # If the swarm is already unlocked, use this command to get the swarm key
	docker swarm update --autolock=false # disable lock for swarm
	docker swarm unlock-key --rotate # rotate the unlock key
	

Lecture: Extend the Instructions to Run Individual Containers into Running Services Under Swarm and Manipulate a Running Stack of Services
------------------------------------------------------------------------------------------------------------------------------------------
	- docker images # List all images
	- docker node ls # Swarm Infra, all managers, and workers
	- docker service ls # Services running on different swarm
	- docker pull httpd
  	- docker run -d --name webservice_test httpd
	-- Issue with single container	
		- networking is limited that hosts
		- network routing when accessing outside of that network
		- less fault tollorent 
	-- When using service you can overcome all the network routing using mesh routing and orchestration of multiple container 
	- docker service create --name webserver_docker_service -p 80:80 httpd # basic command to start the web service with 1 replicae
	- docker service ls # list service running on the swarm
	- docker service ps <service_name> # details of the service like name, replicas on what nodes etc.
	**** Even though the service is running only 1 node, all the nodes swarm will be able provide the response services ********
	- docker service create and update # Refer the documentation
	- docker service update --replicas 3 webserver_docker_service # scale the replicas to 3
	- docker service update --replicas 10 --detach=false webserver_docker_service # will give visual representation on whats happening when the replicas are scaling and its progress. Its by default false
	--- We can limit the system resource like cpu and memory for the service
	# --limit-cpu=0.5 is for the service and --reserve-cpu=1 will be the max cpu it has
	# -- Similarly as above --limit-memory=128m and --reserve-memory=256m
		-- least memory that can limited is 4m
	-- docker service update --limit-cpu=.5 --reserve-cpu=1 --limit-memory=128m --reserve-memory=256m  # limiting cpu and memory
	-- We can limit the same for network, storage and so on...

Increase and Decrease the Number of Replicas in a Service
---------------------------------------------------------
	-- docker service create --name webserver_docker_service -p 80:80 httpd # basic service with 1 replica by default for 1 httpd
	-- docker service update --replicas 3 --detach=false webserver_docker_service # increase the replicas to 3
	-- docker service create --name webserver_ngnix_service -p 5901:80 nginx # basic service with 1 replica by default for nginx
	-- docker service ls # list all the services and number of replicas
	-- docker service scale webserver_ngnix_service=3 # scale switch also can be used to increase or decrease replicas
	-- docker service scale webserver_ngnix_service=2 webserver_docker_service=2 # with scale you can increase or decrease replicas for multiple services at once

Lecture: Running Replicated vs. Global Services
---------------------------------------------------------
	--Replicated : service create by default it creates one replica and we can scale
		- docker service create --name webserver_docker_service -p 80:80 httpd #
		- docker service scale webserver_ngnix_service=3
	-- Global : In global, we don't mention any replicas, by default 1 replica is installed on each node available in swarm

		- docker service create --name webserver_ngnix_service -p 5901:80 --mode global nginx 

	-- docker service ls # below is how the MODE is shown 	 
		ID                  NAME                       MODE                REPLICAS            IMAGE               PORTS
		rpnytbpls0t8        webserver_docker_service   replicated          1/1                 httpd:latest        *:80->80/tcp
		vzh69j2yw47r        webserver_ngnix_service    global              4/4                 nginx:latest        *:5901->80/tcp
	-- when run as global mode, when a new node is added it automatically scales the service to another node
	-- once mode glocal mode is selected, you can update the service using docker service update comand

Lecture: Demonstrate the Usage of Templates with 'docker service create'
-----------------------------------------------------------------------
	-- tempalates can used for hostnames, mounts, and environments in service create
	-- certainly can be used for templateIDs
	- docker service create --name myweb --hostname="{{.Node.ID}}-{{.Service.Name}}" httpd
  	- docker service ps --no-trunc <servicename>
	- docker inspect --format="{{.Config.Hostname}}" <Service_name>.1.<ID>

Lecture: Apply Node Labels for Task Placement
---------------------------------------------
	- docker node inspect --pretty tk44qwoirf67wpl057xwc13mu # human readable instead of JSON format
	- docker node update --label-add mynode=<label_name> <Worker and manager node> # assign a label to the swarm node 
	- docker service create --name contraints -p 80:80 --contraint 'node.labels.mynode == testnode' --replicas 3 httpd # using labels and contraints you can restrict the service create to particular nodes
	

Lecture: Convert an Application Deployment into a Stack File Using a YAML Compose File with 'docker stack deploy'
-----------------------------------------------------------------------------------------------------------------
 # Installing docker compose
   	-  yum install -y python-pip
	-  pip install --upgrade pip
	-  pip install docker-compose

-- docker compose is used to build, and deploy services using a YAML file (docker-compose.yml). 
-- In the docker file we can define the images,we need to build and and services required for the build
-- for example lets build out a container using a regular Dockerfile, as below
	#simple server
	FROM centos:latest
	LABEL maintainer="c"

	RUN yum install -y httpd
	RUN echo "Our Container Website" >> /var/www/html/index.html

	EXPOSE 80

	ENTRYPOINT apachectl -DFOREGROUND
	
-- building this as image using regular docker build would be 
	- docker build -t myhttpd:v1 .
-- Lets make sure, that the build is working as expected by builing and starting the container
-- Now. lets use docker-compose.yml to build a above image, create 2 webservices and 1 nginx service as load-balanacer
-- Ensure that you have Dockerfile and docker-compose.yml is same directory. Below is how the docker-compose.yml looks for the above mentioned scenario
	    version: '3' # version 3 would be docker-composer version
            services: 
              apiweb1:
                      image: myhttpd:v2
                      build: .
                      ports:
                         - "81:80"
              apiweb2:
                      image: myhttpd:v2
                      build: .
                      ports:
                         - "82:80"
              load-balancer:
                      image: nginx:latest
                      ports:
                         - "80:80"	
-- once the above docker-composer.yml file is formed, use the below command to build and deploy services
  		- docker-compose up -d	
   # However, this build and deploy all the services on the same node in the swarm cluster farm. hence we need to use docker stack deploy
-- docker-compose down --volumes is used to stop all services  started using docker-composer
-- docker stack deploy --compose-file docker-compose.yml <service_name> t# this stack deploy will be used for deploying the service and distributing them onto different nodes in swarm farm
*** stack deploy will not build the images. Hence we need to initially use docker-compose up -f to build the images and then use stack deploy


Lecture: Understanding the 'docker inspect' Output
--------------------------------------------------
 	- docker run -d --name testweb httpd # start the container
	- docker container inspect testweb # insepct will full Json
 	- docker container inspect testweb | grep IPAdd # grep Ip address
 	- docker container inspect testweb --format "{{.State.Status}}" # Parse through JSON
	- docker container inspect testweb --format "{{.State.Paused}}"
	- docker container inspect testweb --format "{{.State}}"
	- docker container inspect testweb --format "{{json .State}}" # get the keys and values of state in json format
	- docker container inspect testweb --format "{{json .Config}}" | jq . # use jq for pretty structure 

Lecture: Identify the Steps Needed to Troubleshoot a Service Not Deploying
--------------------------------------------------------------------------
- Check 
	- docker node ls
	- docker service ps <servicename>
	- docker seervice inspect <servicename>
	- docker ps ? is your cluster is locked ? if restarted the cluster, you need to unlock
	- recently restoration on swarm ?
	- recently updated docker ?
	- SELinux issues ? 'setenforce 0' ?
	- Previleages/permissions on filesystem 
	- CPU/Mem/Disk requirements ?
	- Routing - Make sure that end points using the service are on same network
	- Firewall 
	- rule out environment issues

	
	



